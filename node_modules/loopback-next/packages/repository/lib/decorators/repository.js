"use strict";
// Copyright IBM Corp. 2017. All Rights Reserved.
// Node module: @loopback/repository
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT
Object.defineProperty(exports, "__esModule", { value: true });
const context_1 = require("@loopback/context");
/**
 * Metadata for a repository
 */
class RepositoryMetadata {
    /**
     * Constructor for RepositoryMetadata
     *
     * @param model Name or class of the model. If the value is a string and
     * `dataSource` is not present, it will treated as the name of a predefined
     * repository
     * @param dataSource Name or instance of the data source
     *
     * For example:
     *
     * - new RepositoryMetadata(repoName);
     * - new RepositoryMetadata(modelName, dataSourceName);
     * - new RepositoryMetadata(modelClass, dataSourceInstance);
     * - new RepositoryMetadata(modelName, dataSourceInstance);
     * - new RepositoryMetadata(modelClass, dataSourceName);
     */
    constructor(modelOrRepo, dataSource) {
        this.name = typeof modelOrRepo === 'string' && dataSource === undefined
            ? modelOrRepo
            : undefined;
        this.modelName = typeof modelOrRepo === 'string' && dataSource != null
            ? modelOrRepo
            : undefined;
        this.modelClass = typeof modelOrRepo === 'function'
            ? modelOrRepo
            : undefined;
        this.dataSourceName = typeof dataSource === 'string'
            ? dataSource
            : undefined;
        this.dataSource = typeof dataSource === 'object' ? dataSource : undefined;
    }
}
exports.RepositoryMetadata = RepositoryMetadata;
/**
 * Decorator for model definitions
 * @param model Name of the repo or name/class of the model
 * @param dataSource Name or instance of the data source
 * @returns {(target:AnyType)}
 *
 * For example:
 *
 * - @repository('myCustomerRepo')
 * - @repository('Customer', 'mysqlDataSource')
 * - @repository(Customer, mysqlDataSource)
 * - @repository('Customer', mysqlDataSource)
 * - @repository(Customer, 'mysqlDataSource')
 */
function repository(model, dataSource) {
    const meta = new RepositoryMetadata(model, dataSource);
    return function (target, key, descriptor) {
        if (key || typeof descriptor === 'number') {
            if (meta.name) {
                // Make it shortcut to `@inject('repositories:MyRepo')`
                // Please note key is undefined for constructor. If strictNullChecks
                // is true, the compiler will complain as reflect-metadata won't
                // accept undefined or null for key. Use ! to fool the compiler.
                context_1.inject('repositories:' + meta.name, meta)(target, key, descriptor);
            }
            else {
                // Use repository-factory to create a repository from model + dataSource
                // inject('repository-factory', meta)(target, key!, descriptor);
                throw new Error('@repository(model, dataSource) is not implemented');
            }
            return;
        }
        // Mixin repostory into the class
        throw new Error('Class level @repository is not implemented');
    };
}
exports.repository = repository;
//# sourceMappingURL=repository.js.map