export declare const jugglerModule: any;
import { ObjectType, Options } from './common-types';
import { juggler } from './loopback-datasource-juggler';
export * from './loopback-datasource-juggler';
export declare const DataSourceConstructor: typeof juggler.DataSource;
export declare const ModelBaseConstructor: typeof juggler.ModelBase;
/**
 * This is a bridge to the legacy DAO class. The function mixes DAO methods
 * into a model class and attach it to a given data source
 * @param modelClass {} Model class
 * @param ds {DataSource} Data source
 * @returns {} The new model class with DAO (CRUD) operations
 */
export declare function bindModel<T extends typeof juggler.ModelBase>(modelClass: T, ds: juggler.DataSource): T;
import { Entity } from './model';
import { Filter, Where } from './query';
import { EntityCrudRepository } from './repository';
export declare class DefaultCrudRepository<T extends Entity, ID> implements EntityCrudRepository<T, ID> {
    modelClass: typeof juggler.PersistedModel;
    constructor(modelClass: typeof juggler.PersistedModel, dataSource: juggler.DataSource);
    create(entity: ObjectType<T>, options?: Options): Promise<T>;
    createAll(entities: ObjectType<T>[], options?: Options): Promise<T[]>;
    save(entity: ObjectType<T>, options?: Options): Promise<T>;
    find(filter?: Filter, options?: Options): Promise<T[]>;
    findById(id: ID, filter?: Filter, options?: Options): Promise<T>;
    update(entity: ObjectType<T>, options?: Options): Promise<boolean>;
    delete(entity: ObjectType<T>, options?: Options): Promise<boolean>;
    updateAll(data: ObjectType<T>, where?: Where, options?: Options): Promise<number>;
    updateById(id: ID, data: ObjectType<T>, options?: Options): Promise<boolean>;
    replaceById(id: ID, data: ObjectType<T>, options?: Options): Promise<boolean>;
    deleteAll(where?: Where, options?: Options): Promise<number>;
    deleteById(id: ID, options?: Options): Promise<boolean>;
    count(where?: Where, options?: Options): Promise<number>;
    exists(id: ID, options?: Options): Promise<boolean>;
}
