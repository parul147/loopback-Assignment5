"use strict";
// Copyright IBM Corp. 2017. All Rights Reserved.
// Node module: @loopback/core
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT
Object.defineProperty(exports, "__esModule", { value: true });
const context_1 = require("@loopback/context");
const http_1 = require("http");
const debug = require('debug')('loopback:core:server');
class Server extends context_1.Context {
    constructor(app, config = { port: 3000 }) {
        super();
        this.app = app;
        this.config = config;
        this.state = ServerState.cold;
    }
    async start() {
        this.state = ServerState.starting;
        const server = http_1.createServer((req, res) => this._handleRequest(req, res));
        server.listen(this.config.port);
        return new Promise((resolve, reject) => {
            server.once('listening', () => {
                // FIXME(bajtos) The updated port number should be part of "status"
                // object, we shouldn't be changing original config IMO.
                // Consider exposing full base URL including http/https scheme prefix
                try {
                    this.config.port = server.address().port;
                    this.state = ServerState.listening;
                    resolve();
                }
                catch (err) {
                    reject(err);
                }
            });
        });
    }
    _handleRequest(req, res) {
        this.app.handleHttp(req, res).catch((err) => {
            this._onUnhandledError(req, res, err);
        });
    }
    _onUnhandledError(req, res, err) {
        if (!res.headersSent) {
            res.statusCode = 500;
            res.end();
        }
        // It's the responsibility of the Application to handle any errors.
        // If an unhandled error escaped, then something very wrong happened
        // and it's best to crash the process immediately.
        process.nextTick(() => {
            throw err;
        });
    }
}
exports.Server = Server;
var ServerState;
(function (ServerState) {
    ServerState[ServerState["cold"] = 0] = "cold";
    ServerState[ServerState["starting"] = 1] = "starting";
    ServerState[ServerState["listening"] = 2] = "listening";
    ServerState[ServerState["crashed"] = 3] = "crashed";
    ServerState[ServerState["stopped"] = 4] = "stopped";
})(ServerState = exports.ServerState || (exports.ServerState = {}));
//# sourceMappingURL=server.js.map