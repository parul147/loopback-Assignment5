"use strict";
// Copyright IBM Corp. 2017. All Rights Reserved.
// Node module: @loopback/core
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const debug = require('debug')('loopback:core:sequence');
const context_1 = require("@loopback/context");
const parser_1 = require("./parser");
const writer_1 = require("./writer");
let Sequence = class Sequence {
    constructor(findRoute, invoke, logError) {
        this.findRoute = findRoute;
        this.invoke = invoke;
        this.logError = logError;
    }
    run(req, res) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { controller, methodName, spec, pathParams } = this.findRoute(req);
                const args = yield parser_1.parseOperationArgs(req, spec, pathParams);
                const result = yield this.invoke(controller, methodName, args);
                debug('%s.%s() result -', controller, methodName, result);
                this.sendResponse(res, result);
            }
            catch (err) {
                this.sendError(res, req, err);
            }
        });
    }
    sendResponse(response, result) {
        writer_1.writeResultToResponse(response, result);
    }
    sendError(res, req, err) {
        const statusCode = err.statusCode || err.status || 500;
        res.statusCode = statusCode;
        res.end();
        this.logError(err, statusCode, req);
    }
};
Sequence = __decorate([
    __param(0, context_1.inject('findRoute')),
    __param(1, context_1.inject('invokeMethod')),
    __param(2, context_1.inject('logError')),
    __metadata("design:paramtypes", [Function, Function, Function])
], Sequence);
exports.Sequence = Sequence;
//# sourceMappingURL=sequence.js.map