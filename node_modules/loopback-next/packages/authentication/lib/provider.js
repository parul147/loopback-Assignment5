"use strict";
// Copyright IBM Corp. 2013,2017. All Rights Reserved.
// Node module: loopback
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@loopback/core");
const strategy_adapter_1 = require("./strategy-adapter");
const keys_1 = require("./keys");
/**
 * @description Provider of a function which authenticates
 * @example `context.bind('authentication_key')
 *   .toProvider(AuthenticationProvider)`
 */
let AuthenticationProvider = class AuthenticationProvider {
    constructor(strategy) {
        this.strategy = strategy;
    }
    /**
     * @returns authenticateFn
     */
    value() {
        return async (request) => await getAuthenticatedUser(this.strategy, request);
    }
};
AuthenticationProvider = __decorate([
    __param(0, core_1.inject(keys_1.BindingKeys.Authentication.STRATEGY)),
    __metadata("design:paramtypes", [Object])
], AuthenticationProvider);
exports.AuthenticationProvider = AuthenticationProvider;
/**
 * @description a function which accepts (passport-strategy, request)
 *   and returns a user
 * @param strategy Passport strategy
 * @param request Parsed Request
 *
 * @example
 * ```ts
 *   const strategy = new BasicStrategy(async (username, password) => {
 *     return await findUser(username, password);
 *   };
 *   getAuthenticatedUser(strategy, ParsedRequest);
 * ```
 */
async function getAuthenticatedUser(strategy, request) {
    if (!strategy.authenticate) {
        return Promise.reject(new Error('invalid strategy parameter'));
    }
    const strategyAdapter = new strategy_adapter_1.StrategyAdapter(strategy);
    const user = await strategyAdapter.authenticate(request);
    return user;
}
exports.getAuthenticatedUser = getAuthenticatedUser;
//# sourceMappingURL=provider.js.map